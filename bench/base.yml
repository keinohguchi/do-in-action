---
- name: data vis containers based on github.com/nerdalert/cloud-bandwidth
  hosts: monitor
  vars:
    repo: https://github.com/nerdalert/cloud-bandwidth
  gather_facts: false
  pre_tasks:
    - name: install pre-requisite packages
      apt: name={{ item }}
      with_items:
        - docker.io
        - python-pip
      become: true

    - name: install python packages
      pip: name={{ item }}
      with_items:
        - docker
        - docker-compose
      become: true

    - name: clone the cloud-bandwidth git repo
      git:
        repo: "{{ repo }}"
        dest: /tmp/cloud-bandwidth
        update: yes
        force: yes
        ssh_opts: "-o StrictHostKeyChecking=no"

    - name: modify the grafana configuration
      copy:
        src: "files/{{ item }}"
        dest: "/tmp/{{ item }}"
      with_items:
        - cloud-bandwidth/graphite_api/default.json

    - name: fire up the data vis containers!
      docker_service:
        project_src: /tmp/cloud-bandwidth

- name: run iperf server as bandwidth agent on server
  hosts: server
  vars:
    agent_image: networkstatic/iperf3:latest
    agent_port: 5201
  gather_facts: false
  pre_tasks:
    - name: install pre-requisite packages
      apt: name={{ item }}
      with_items:
        - docker.io
        - python-pip
      become: true

    - name: install python packages
      pip: name={{ item }}
      with_items:
        - docker
      become: true

    - name: pull networkstatic/iperf3 image
      command: docker pull {{ agent_image }}

    - name: run iperf3 server
      docker_container:
        name: iperf3-agent
        image: "{{ agent_image }}"
        ports: "{{ agent_port }}:{{ agent_port }}"
        command: -s
        detach: true
        state: started
      changed_when: false

- name: run iperf poller as bandwidth poller on client
  hosts: client
  vars:
    debug: false
    poller_image: local/bandwidth-poller:latest
    repo: https://github.com/nerdalert/cloud-bandwidth
    polling:
      count: 120
      sampling_seconds: 10
      interval_seconds: 40
      target_name: "{{ server.name }}"
      target_address: "{{ server.ipv4 }}"
      report_address: "{{ monitor.ipv4 }}"
  gather_facts: false
  pre_tasks:
    - name: install pre-requisite packages
      apt: name={{ item }}
      with_items:
        - docker.io
        - python-pip
      become: true

    - name: install python packages
      pip: name={{ item.name }} version={{ item.version }}
      with_items:
        - { name: docker, version: 2.7.0 }
      become: true

    - name: clone the cloud-bandwidth git repo
      git:
        repo: "{{ repo }}"
        dest: /tmp/cloud-bandwidth
        update: yes
        force: yes
        ssh_opts: "-o StrictHostKeyChecking=no"

    - name: modify the poller configurations
      patch:
        src: "files/{{ item.path }}.diff"
        dest: "/tmp/{{ item.path }}"
        strip: "{{ item.strip }}"
      with_items:
        - { path: cloud-bandwidth/bandwidth_poller/entry.sh, strip: 2 }

    - name: build the poller docker image
      docker_image:
        path: /tmp/cloud-bandwidth/bandwidth_poller
        name: "{{ poller_image }}"

  tasks:
    - name: run iperf3 bandwidth poller
      docker_container:
        name: iperf3-poller
        image: "{{ poller_image }}"
        state: started
        env:
          DB_IP: "{{ polling.report_address }}"
          BW_AGENT_IP: "{{ polling.target_address }}"
          MACHINE_TYPE: "{{ polling.target_name }}"
          IPERF_SAMPLE_COUNT: "{{ polling.sampling_seconds }}"
      register: iperf3_poller
      until: iperf3_poller.ansible_facts.docker_container.State.ExitCode != 0
      retries: "{{ polling.count }}"
      delay: "{{ polling.interval_seconds }}"
      ignore_errors: true
      changed_when: false

    - debug: var=iperf3_poller
      when: debug|bool

  post_tasks:
    - name: cleanup iperf3 bandwidth poller on the client
      docker_container:
        name: iperf3-poller
        state: absent

- name: cleanup iperf3 agent container on the server
  hosts: server
  gather_facts: false
  post_tasks:
    - name: cleanup iperf3 bandwidth agent on the server
      docker_container:
        name: iperf3-agent
        state: absent
